CHIP Clz{
    IN in[16];
    OUT out[16];
    PARTS:

    Not(in=in[0], out=nin0);
    Not(in=in[1], out=nin1);
    Not(in=in[2], out=nin2);
    Not(in=in[3], out=nin3);
    Not(in=in[4], out=nin4);
    Not(in=in[5], out=nin5);
    Not(in=in[6], out=nin6);
    Not(in=in[7], out=nin7);
    Not(in=in[8], out=nin8);
    Not(in=in[9], out=nin9);
    Not(in=in[10], out=nin10);
    Not(in=in[11], out=nin11);
    Not(in=in[12], out=nin12);
    Not(in=in[13], out=nin13);
    Not(in=in[14], out=nin14);
    Not(in=in[15], out=nin15);


//--


    And(a=nin15, b=nin14, out=and1);
    And(a=and1, b=nin13, out=and2);
    And(a=and2, b=nin12, out=and3);
    And(a=and3, b=nin11, out=and4);
    And(a=and4, b=nin10, out=and5);
    And(a=and5, b=nin9, out=and6);
    And(a=and6, b=nin8, out=and7);
    And(a=and7, b=nin7, out=and8);
    And(a=and8, b=nin6, out=and9);
    And(a=and9, b=nin5, out=and10);
    And(a=and10, b=nin4, out=and11);
    And(a=and11, b=nin3, out=and12);
    And(a=and12, b=nin2, out=and13);
    And(a=and13, b=nin1, out=and14);
    And(a=and14, b=nin0, out=and15);

    
    Not16(in=in, out=nin);
    Add16(a=in, b=nin, out=dif);
	Inc16(in=dif, out=zbr);
	Add16(a=zbr, b[0]=and1, out=zbr1);
    Add16(a=zbr1, b[0]=and2, out=zbr2);
    Add16(a=zbr2, b[0]=and3, out=zbr3);
    Add16(a=zbr3, b[0]=and4, out=zbr4);
    Add16(a=zbr4, b[0]=and5, out=zbr5);
    Add16(a=zbr5, b[0]=and6, out=zbr6);
    Add16(a=zbr6, b[0]=and7, out=zbr7);
    Add16(a=zbr7, b[0]=and8, out=zbr8);
    Add16(a=zbr8, b[0]=and9, out=zbr9);
    Add16(a=zbr9, b[0]=and10, out=zbr10);
    Add16(a=zbr10, b[0]=and11, out=zbr11);
    Add16(a=zbr11, b[0]=and12, out=zbr12);
    Add16(a=zbr12, b[0]=and13, out=zbr13);
    Add16(a=zbr13, b[0]=and14, out=zbr14);
    Add16(a=zbr14, b[0]=and15, out=zbr15);

    Inc16(in=zbr15, out=out);
}

